// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wearable_device.sql

package db

import (
	"context"
)

const addWearableDevices = `-- name: AddWearableDevices :one
INSERT INTO wearable_devices (device_type, device_name, assigned_patient_id, serial_number, country_code)
Values ($1, $2, $3, $4, $5)
RETURNING id, device_type, assigned_patient_id
`

type AddWearableDevicesParams struct {
	DeviceType        string        `json:"device_type"`
	DeviceName        string        `json:"device_name"`
	AssignedPatientID *int32 `json:"assigned_patient_id"`
	SerialNumber      string        `json:"serial_number"`
	CountryCode       *int32 `json:"country_code"`
}

type AddWearableDevicesRow struct {
	ID                int32         `json:"id"`
	DeviceType        string        `json:"device_type"`
	AssignedPatientID *int32 `json:"assigned_patient_id"`
}

func (q *Queries) AddWearableDevices(ctx context.Context, arg AddWearableDevicesParams) (AddWearableDevicesRow, error) {
	row := q.db.QueryRowContext(ctx, addWearableDevices,
		arg.DeviceType,
		arg.DeviceName,
		arg.AssignedPatientID,
		arg.SerialNumber,
		arg.CountryCode,
	)
	var i AddWearableDevicesRow
	err := row.Scan(&i.ID, &i.DeviceType, &i.AssignedPatientID)
	return i, err
}

const assignDevice = `-- name: AssignDevice :exec
UPDATE wearable_devices
SET assigned_patient_id = $1
WHERE id = $2
`

type AssignDeviceParams struct {
	AssignedPatientID *int32 `json:"assigned_patient_id"`
	ID                *int32         `json:"id"`
}

func (q *Queries) AssignDevice(ctx context.Context, arg AssignDeviceParams) error {
	_, err := q.db.ExecContext(ctx, assignDevice, arg.AssignedPatientID, arg.ID)
	return err
}

const getAvailableDevices = `-- name: GetAvailableDevices :many
SELECT id, device_name, device_type, assigned_patient_id, serial_number, country_code, created_at, updated_at FROM wearable_devices wd WHERE wd.assigned_patient_id IS NULL
`

func (q *Queries) GetAvailableDevices(ctx context.Context) ([]WearableDevices, error) {
	rows, err := q.db.QueryContext(ctx, getAvailableDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WearableDevices{}
	for rows.Next() {
		var i WearableDevices
		if err := rows.Scan(
			&i.ID,
			&i.DeviceName,
			&i.DeviceType,
			&i.AssignedPatientID,
			&i.SerialNumber,
			&i.CountryCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
