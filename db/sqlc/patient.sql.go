// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patient.sql

package db

import (
	"context"
)

const assignDeviceToPatient = `-- name: AssignDeviceToPatient :exec
UPDATE patients
SET assigned_device_id = $1
WHERE id = $2
`

type AssignDeviceToPatientParams struct {
	AssignedDeviceID *int32 `json:"assigned_device_id"`
	ID               int32         `json:"id"`
}

func (q *Queries) AssignDeviceToPatient(ctx context.Context, arg AssignDeviceToPatientParams) error {
	_, err := q.db.ExecContext(ctx, assignDeviceToPatient, arg.AssignedDeviceID, arg.ID)
	return err
}

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (full_name, age, gender, contact_info, assigned_device_id)
Values ($1, $2, $3, $4, $5)
RETURNING id, full_name, assigned_device_id
`

type CreatePatientParams struct {
	FullName         string         `json:"full_name"`
	Age              *int  `json:"age"`
	Gender           *string `json:"gender"`
	ContactInfo      string         `json:"contact_info"`
	AssignedDeviceID *int32  `json:"assigned_device_id"`
}

type CreatePatientRow struct {
	ID               int32         `json:"id"`
	FullName         string        `json:"full_name"`
	AssignedDeviceID *int32 `json:"assigned_device_id"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (CreatePatientRow, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.FullName,
		arg.Age,
		arg.Gender,
		arg.ContactInfo,
		arg.AssignedDeviceID,
	)
	var i CreatePatientRow
	err := row.Scan(&i.ID, &i.FullName, &i.AssignedDeviceID)
	return i, err
}

const getAllPatients = `-- name: GetAllPatients :many
SELECT id, full_name, age, gender, contact_info, assigned_device_id, created_at, updated_at FROM patients
`

func (q *Queries) GetAllPatients(ctx context.Context) ([]Patients, error) {
	rows, err := q.db.QueryContext(ctx, getAllPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Patients{}
	for rows.Next() {
		var i Patients
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Age,
			&i.Gender,
			&i.ContactInfo,
			&i.AssignedDeviceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientWithDevice = `-- name: GetPatientWithDevice :one
SELECT 
    p.id AS patient_id,
    p.full_name,
    p.age,
    p.gender,
    p.contact_info,
    wd.id AS device_id,
    wd.device_name,
    wd.device_type
FROM 
    patients p
LEFT JOIN 
    wearable_devices wd ON p.assigned_device_id = wd.id
WHERE 
    p.id = $1
`

type GetPatientWithDeviceRow struct {
	PatientID   int32   `json:"patient_id"`
	FullName    string  `json:"full_name"`
	Age         *int    `json:"age"`         
	Gender      *string `json:"gender"`     
	ContactInfo string  `json:"contact_info"`
	DeviceID    *int32  `json:"device_id"`   // Pointer for DeviceID to handle NULL
	DeviceName  *string `json:"device_name"`  // Pointer for DeviceName to handle NULL
	DeviceType  *string `json:"device_type"`  // Pointer for DeviceType to handle NULL
}

func (q *Queries) GetPatientWithDevice(ctx context.Context, id int32) (GetPatientWithDeviceRow, error) {
	row := q.db.QueryRowContext(ctx, getPatientWithDevice, id)
	var i GetPatientWithDeviceRow

	err := row.Scan(
		&i.PatientID,
		&i.FullName,
		&i.Age,
		&i.Gender,
		&i.ContactInfo,
		&i.DeviceID,
		&i.DeviceName,  // Now a pointer
		&i.DeviceType,  // Now a pointer
	)

	if err != nil {
		return i, err
	}

	return i, nil
}

